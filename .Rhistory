#SppCode <- read.csv("https://raw.githubusercontent.com/DS4Ag/Forestry_lab1/refs/heads/main/Species_Codes.csv")
print (Sppcode)
u2_data <- read.csv("https://raw.githubusercontent.com/DS4Ag/Forestry_lab1/refs/heads/main/U2_2017data.csv")
print (u2_data)
SppCode <- read.csv("https://raw.githubusercontent.com/DS4Ag/Forestry_lab1/refs/heads/main/Species_Codes.csv")
print (Sppcode)
SppCode <- read.csv("https://raw.githubusercontent.com/DS4Ag/Forestry_lab1/refs/heads/main/Species_Codes.csv")
print (SppCode)
str(u2_data)
str(u2_data)
skimr::skim(u2_data)
skimr::skim(u2_data)
str(u2_data)
skim(u2_data)
str(u2_data)
skim(u2_data)
str(u2_data)
glimpse(u2_data)
## Step 1.2: Read the U2_2017data.csv File from GitHub
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The `read.csv()` function reads a CSV file directly from an online source.
# Ensure you use the correct "raw" URL for the file.
library(dplyr)
## Step 1.2: Read the U2_2017data.csv File from GitHub
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The `read.csv()` function reads a CSV file directly from an online source.
# Ensure you use the correct "raw" URL for the file.
install.packages("dplyr")
library(dplyr)
glimpse(u2_data)
install.packages("skimr")
library(skimr)
skim(u2_data)
u2_data <- dataframe %>% filter(!is.na("DBH","Code"))
u2_data <- u2_data %>% filter(!is.na("DBH","Code"))
u2_data <- u2_data %>% filter((!is.na("DBH")), (!is.na("Code")))
print(u2_data)
u2_na_data <- u2_data %>% filter((!is.na("DBH")), (!is.na("Code")))
print(u2_na_data)
u2_na_data <- u2_data %>% filter((!is.na("DBH")), (!is.na("Code")))
print(u2_na_data)
u2_na_data <- u2_data %>% filter((!is.na("DBH")) & (!is.na("Code")))
print(u2_na_data)
u2_na_data <- u2_data %>% filter(!is.na("DBH") & !is.na("Code"))
print(u2_na_data)
u2_data <- u2_data %>% filter(!is.na("DBH") !is.na("Code"))
u2_data <- u2_data %>% filter(!is.na("DBH"), !is.na("Code"))
print(u2_data)
summary(df$DBH)
u2_data <- u2_data %>% filter((!is.na("DBH")), (!is.na("Code")))
print(u2_data)
u2_data <- u2_data %>% filter("Class" == "0")
print (u2_data)
u2_data <- u2_data %>% filter("Class" == 0)
print (u2_data)
u2_data <- u2_data %>% filter(Class == 0)
print (u2_data)
u2_data <- u2_data %>% filter(Class == 0)
print (u2_data)
u2_data <- u2_data %>% filter(Class == "0")
print (u2_data)
u2_data <- u2_data %>% filter((!is.NA("DBH")), (!is.na("Code")))
SppCode <- read.csv("https://raw.githubusercontent.com/DS4Ag/Forestry_lab1/refs/heads/main/Species_Codes.csv")
print (SppCode)
str(SppCode)
skim(SppCode)
glimpse(SppCode)
u2_data <- u2_data %>% filter((!is.na("DBH")), (!is.na("Code")))
print(u2_data)
u2_data <- u2_data %>% filter((!is.na("DBH")), (!is.na("Code")))
print(u2_data)
u2_data <- u2_data %>% filter((!is.na("DBH")), (!is.na("Code")))
print(u2_data)
str(u2_data)
u2_data <- read.csv("https://raw.githubusercontent.com/DS4Ag/Forestry_lab1/refs/heads/main/U2_2017data.csv")
print (u2_data)
u2_data <- u2_data %>% filter((!is.na("DBH")), (!is.na("Code")))
str(u2_data)
#----------------
u2_data <- u2_data %>% filter((!is.na(DBH)), (!is.na(Code)))
str(u2_data)
#----------------
u2_data <- u2_data %>% filter(Class == "O")
str (u2_data)
trees_merge <- merge(x = u2_data, y = SppCode, by.x = "Code", by.y = "SppCode2", all.x = TRUE)
trees_merge <- merge(x = u2_data, y = SppCode, by.x = "Code", by.y = "SppCode", all.x = TRUE)
str(trees_merge)
#----------------
str(trees_merge)
#----------------
u2_data <- read.csv("https://raw.githubusercontent.com/DS4Ag/Forestry_lab1/refs/heads/main/U2_2017data.csv")
#----------------
u2_data <- u2_data %>% filter((!is.na(DBH)), (!is.na(Code)))
#----------------
u2_data <- u2_data %>% filter(Class == "O")
#----------------
str(trees_merge)
trees_merge <- merge(x = u2_data, y = SppCode, by.x = "Code", by.y = "SppCode", all.x = TRUE)
str(trees_merge)
#----------------
trees <- trees_merge %>% select(Plot, Code, Genus, Common.name, DBH, Chojnacky_Code)
str(trees)
print(trees)
head(trees_merge)
#----------------
dplyr::mutate(EF)
#----------------
plot_radius <- 58.5
plot_area_acres <- (x * plot_radius * plot_radius) / 43560
plot_area_acres <- (π * plot_radius * plot_radius) / 43560
#----------------
plot_radius <- 58.5
plot_area_acres <- (pi * plot_radius^2) / 43560
EF <- 1 / plot_area_acres
#----------------
dplyr::mutate(EF)
print (EF)
# For this step, you are going to create new columns for the indices you will calculate.
# There are different options to add a new column to a dataframe:
# - Using the `$` Operator: This method directly assigns a value to a new column. For example, `dataframe$new_column <- value`.
# - Using `dplyr::mutate()`: This method allows chaining operations and is consistent with the `dplyr` workflow you've used in previous steps.
#     For example, `dataframe <- dataframe %>% mutate(new_column = value)`.
install.packages("dplyr")
#----------------
dplyr::mutate(EF)
#----------------
#dplyr::mutate(EF)
trees_merge$EF <- EF
head(trees_merge)
head(trees)
#----------------
dia_ft <- trees$DBH / 12
trees$dia_ft <- dia_ft
head(trees)
#----------------
#dplyr::mutate(EF)
trees$EF <- EF
head(trees)
# Calculate BA per tree:  BA = π × (diameter in feet / 2)^2.
#   - Add the result as a new column named `BA` to the trees dataframe.
#----------------
BA <- pi * (dia_ft / 2) ^ 2
trees$BA <- BA
head(BA)
head(trees)
# Calculate BA per acre: BA_pa = BA × EF.
#   - Add the result as a new column named `BA_pa` to the trees dataframe.
#----------------
BA_pa <- BA * EF
trees$BA_pa <- BA_pa
head(trees)
# Calculate TPA: TPA = 1 × EF.
#   - Add the result as a new column named `TPA` to the trees dataframe.
#----------------
TPA <- 1 * EF
trees$TPA <- TPA
head(trees)
# Checkpoint: Review the Largest DBH Values
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Use the following code to verify your results:
head(trees %>% arrange(desc(BA_pa)))
#----------------
BA <- trees %>% group_by(BA_pa) %>% summarise(sum_u2_BA = sum(BA_pa))
sum_u2_BA$BA <- BA
#----------------
sum_u2_BA <- trees %>% group_by(Plot) %>% summarise(BA = sum(BA_pa))
sum_u2_BA$BA <- BA
#----------------
sum_u2_BA <- trees %>% group_by(Plot) %>% summarise(BA = sum(BA_pa))
head(sum_u2_BA)
#----------------
sum_u2_TPA <- trees %>% group_by(Plot) %>% summarise(TPA = sum(TPA))
head(sum_u2_TPA)
#----------------
sum_u2 <- sum_u2_BA %>% inner_join(sum_u2_BA, sum_u2_TPA, by = "Plot")
head(sum_u2)
#----------------
sum_u2 <- sum_u2_BA %>% inner_join(sum_u2_TPA, by = "Plot")
head(sum_u2)
# Checkpoint: Review the Largest DBH Values
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Use the following code to verify your results:
head(trees %>% arrange(desc(BA_pa)))
#----------------
sum_u2 %>% arrange(desc(Plot))
#----------------
sum_u2 %>% arrange(desc(BA))
#----------------
Bm_equa <- read.csv("https://raw.githubusercontent.com/DS4Ag/Forestry_lab1/refs/heads/main/Biomass%20Equation.csv")
Bm_equa <- Bm_equa %>% select(b0, b1, Chojnacky_Code)
head(Bm_equa)
#----------------
trees <- trees %>% left_join(Bm_equa, by = "Chojnacky_Code")
head(trees)
#----------------
trees <- trees %>% mutate(biomass = exp(b0 + b1 * log(DBH * 2.54)))
head(trees)
#----------------
trees <- trees %>% filter(biomass != 0)
sum_u2 %>% arrange(desc(biomass))
trees %>% arrange(desc(biomass))
print (trees)
#----------------
sum_u2_bm <- sum_u2_bm %>% mutate(bm_pa = biomass * unique(trees$EF))
#----------------
trees <- trees %>% filter(biomass != 0)
#----------------
sum_u2_bm <- trees %>% group_by(Plot) %>% summarise(biomass = sum(biomass))
#----------------
sum_u2_bm <- sum_u2_bm %>% mutate(bm_pa = biomass * unique(trees$EF))
head(sum_u2_bm)
#----------------
sum_u2 <- sum_u2 %>% left_join(biomass, by = "Plot")
#----------------
sum_u2 <- sum_u2 %>% left_join(sum_u2_bm, by = "Plot")
head(sum_u2)
#----------------
sum_u2 %>% arrange(desc(bm_pa))
head(sum_u2)
#----------------
sum_u2 %>% arrange(desc(bm_pa))
head(sum_u2)
#----------------
sum_u2 %>% arrange(desc(bm_pa))
# Checkpoint: Review the Largest bm_pa Values
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Use the following code to verify your results:
head(sum_u2 %>% arrange(desc(bm_pa)))
#----------------
tree_cnt <- trees %>% group_by(Plot, Chojnacky_Code) %>% tally()
head(tree_cnt)
#----------------
dom_cnt <- tree_cnt %>% group_by(Plot) %>% filter(n == max(n))
head(dom_cnt)
# Question: Does `dom_cnt` have the same number of rows as `sum_u2`? If not, what caused the difference?
print(dom_cnt)
print (sum_u2)
#----------------
tree_cnt <- trees %>% group_by(Plot, Chojnacky_Code) %>% tally()
head(tree_cnt)
#----------------
tree_total <- tree_cnt %>% group_by(Plot) %>% summarise(Ttl_Trees = sum(n))
richness <- tree_cnt %>% group_by(Plot) %>% summarise(richness = n_distinct(Code))
print (tree_cnt)
richness <- tree_cnt %>% group_by(Plot) %>% summarise(richness = n_distinct(Chojnacky_Code))
print (tree_total)
print (richness)
#----------------
dom_cnt <- dom_cnt %>% left_join(tree_total, by = "Plot") %>% left_join(richness, by = "Plot")
print (dom_cnt)
print (n = ...)
print (n = ...)
print (n=66)
print (dom_cnt = 66)
lsm_abbreviation_names %>% print(n = nrow(.))
dom_cnt %>% print(n = nrow(.))
#----------------
dom_cnt <- dom_cnt %>% mutate(rel_abd = (n / Ttl_Trees) * 100) %>% mutate(rel_abd = round(rel_abd, 1))
print (dom_cnt)
# Checkpoint: Review the Largest rel_abd Values
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Use the following code to verify your results:
head(dom_cnt %>% arrange(desc(rel_abd)))
#----------------
sum_u2 <- sum_u2 %>% left_join(dom_cnt, by = "Plot") %>% left_join(richness, by = "Plot")
print (sum_u2)
#----------------
sum_u2 <- sum_u2 %>% left_join(SppCode[,c('SppCode','Common.name')], by = c("Code" = "SppCode"))
# Implement this step to add species information and rename columns.
print (SppCode)
#----------------
sum_u2 <- sum_u2 %>% left_join(SppCode[,c('SppCode','Common.name')], by = c("Chojnacky_Code" = "SppCode"))
#----------------
Chojnacky_Code <- str(Chojnacky_Code)
#----------------
SppCode$Chojnacky_Code <- str(SppCode$Chojnacky_Code)
sum_u2 <- sum_u2 %>% left_join(SppCode[,c('SppCode','Common.name')], by = c("Chojnacky_Code" = "SppCode"))
sum_u2 <- sum_u2 %>%
left_join(SppCode[,c('SppCode','Common.name')], by = c("Code" = "SppCode"))
sum_u2 <- sum_u2 %>%
left_join(SppCode[,c('SppCode','Common.name')], by = c("Chojnacky_Code" = "SppCode"))
#----------------
SppCode$Chojnacky_Code <- toString(SppCode$Chojnacky_Code)
sum_u2 <- sum_u2 %>% left_join(SppCode[,c('SppCode','Common.name')], by = c("Chojnacky_Code" = "SppCode"))
class(SppCode$Chojnacky_Cod)
sum_u2$Chojnacky_Code <- toString(sum_u2$Chojnacky_Code)
class(sum_u2$Chojnacky_Cod)
class(sum_u2$Chojnacky_Code)
sum_u2 <- sum_u2 %>% left_join(SppCode[,c('SppCode','Common.name')], by = c("Chojnacky_Code" = "SppCode"))
sum_u2 <- sum_u2 %>% rename(Dom_species = Code, Abundance = n)
sum_u2 <- sum_u2 %>% rename(Dom_species = Chojnacky_Code, Abundance = n)
print (sum_u2)
sum_u2 <- sum_u2 %>% left_join(SppCode, by = c("Chojnacky_Code" = "SppCode"))
sum_u2 <- sum_u2 %>% left_join(SppCode, by = c("Chojnacky_Code" = "SppCode"))
sum_u2 <- sum_u2 %>% rename(Chojnacky_Code = Dom_species, Abundance = n)
sum_u2 <- sum_u2 %>% rename(Chojnacky_Code = Dom_species, Abundance = n)
sum_u2 <- sum_u2 %>% left_join(SppCode, by = c("Dom_Species" = "SppCode"))
